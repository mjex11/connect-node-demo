/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import type * as http2 from "http2";
import type * as http from "http";
import type * as https from "https";
import type { BinaryReadOptions, BinaryWriteOptions, JsonReadOptions, JsonWriteOptions } from "@bufbuild/protobuf";
import type { Interceptor } from "@bufbuild/connect";
import { Compression } from "@bufbuild/connect/protocol";
/**
 * Options specific to the Node.js built in http and https modules.
 */
export interface NodeHttp1TransportOptions {
    httpVersion: "1.1";
    /**
     * Options passed to the request() call of the Node.js built-in
     * http or https module.
     */
    nodeOptions?: Omit<http.RequestOptions, "signal"> | Omit<https.RequestOptions, "signal">;
}
/**
 * Options specific to the Node.js built in http2 module.
 */
export interface NodeHttp2TransportOptions {
    httpVersion: "2";
    /**
     * Options passed to the connect() call of the Node.js built-in
     * http2 module.
     */
    nodeOptions?: http2.ClientSessionOptions | http2.SecureClientSessionOptions;
    /**
     * By default, HTTP/2 sessions are terminated after each request.
     * Set this option to true to keep sessions alive across multiple
     * requests.
     */
    keepSessionAlive?: boolean;
}
/**
 * Options that are common to all client transports for Node.js.
 */
type CommonNodeTransportOptions = (NodeHttp1TransportOptions | NodeHttp2TransportOptions) & {
    /**
     * Base URI for all HTTP requests.
     *
     * Requests will be made to <baseUrl>/<package>.<service>/method
     *
     * Example: `baseUrl: "https://example.com/my-api"`
     *
     * This will make a `POST /my-api/my_package.MyService/Foo` to
     * `example.com` via HTTPS.
     */
    baseUrl: string;
    /**
     * By default, clients use the binary format for gRPC-web, because
     * not all gRPC-web implementations support JSON.
     */
    useBinaryFormat?: boolean;
    /**
     * Interceptors that should be applied to all calls running through
     * this transport. See the Interceptor type for details.
     */
    interceptors?: Interceptor[];
    /**
     * Options for the JSON format.
     */
    jsonOptions?: Partial<JsonReadOptions & JsonWriteOptions>;
    /**
     * Options for the binary wire format.
     */
    binaryOptions?: Partial<BinaryReadOptions & BinaryWriteOptions>;
    /**
     * Compression algorithms available to a client. Clients ask servers to
     * compress responses using any of the registered algorithms. The first
     * registered algorithm is the most preferred.
     *
     * It is safe to use this option liberally: servers will ignore any
     * compression algorithms they don't support. To compress requests, pair this
     * option with `sendCompression`.
     *
     * If this option is not provided, the compression algorithms "gzip" and "br"
     * (Brotli) are accepted. To opt out of response compression, pass an
     * empty array.
     */
    acceptCompression?: Compression[];
    /**
     * Configures the client to use the specified algorithm to compress request
     * messages.
     *
     * Because some servers don't support compression, clients default to sending
     * uncompressed requests.
     */
    sendCompression?: Compression;
    /**
     * Sets a minimum size threshold for compression: Messages that are smaller
     * than the configured minimum are sent uncompressed.
     *
     * The default value is 1 kibibyte, because the CPU cost of compressing very
     * small messages usually isn't worth the small reduction in network I/O.
     */
    compressMinBytes?: number;
    /**
     * Limits the performance impact of pathologically large messages sent by the
     * server. Limits apply to each individual message, not to the stream as a
     * whole.
     *
     * The default limit is the maximum supported value of ~4GiB.
     */
    readMaxBytes?: number;
    /**
     * Prevents sending messages too large for the server to handle.
     *
     * The default limit is the maximum supported value of ~4GiB.
     */
    writeMaxBytes?: number;
};
/**
 * Asserts that the options are within sane limits, and returns default values
 * where no value is provided.
 */
export declare function validateNodeTransportOptions(options: CommonNodeTransportOptions): {
    client: import("@bufbuild/connect/protocol").UniversalClientFn;
    sendCompression: Compression | null;
    acceptCompression: Compression[];
    readMaxBytes: number;
    writeMaxBytes: number;
    compressMinBytes: number;
    useBinaryFormat: boolean;
};
export {};
